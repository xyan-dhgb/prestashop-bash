name: Setup PrestaShop Environment
description: Setup a docker Environment for PrestaShop

inputs:
  # PrestaShop Config inputs
  PHP_VERSION:
    required: true
    description: PHP Version For PrestaShop
  NODE_VERSION:
    required: false
    description: Node Version to Build Themes
    default: 16.20.1
  DB_SERVER:
    required: false
    description: Database Server for PrestaShop (mysql/mariadb)
    default: mysql
  ENABLE_SSL:
    required: false
    description: True to Run with SSL
    default: 'true'
  INSTALL_AUTO:
    required: false
    description: True To Auto Install
    default: 'true'
  DEV_MODE:
    required: false
    description: True to enable Developer mode
    default: 'false'
  DISABLE_MAKE:
    required: false
    description: true to disable Make
    default: 'false'
  PRESTASHOP_DIR:
    required: false
    description: Prestashop folder
    default: '.'
  DOCKER_DAEMON:
    required: false
    description: true to launch docker as a daemon, by default, false to see the whole initialization logs but the rest of the workflow is blocked
    default: 'true'

runs:
  using: 'composite'
  steps:
    # Certificate for SSL
    - name: Generate a Certificate
      if: inputs.ENABLE_SSL == 'true'
      shell: bash
      run: |
        ## Install MkCert
          sudo apt-get --allow-releaseinfo-change update
          sudo apt install libnss3-tools
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
          ## Generate certificate
          mkcert -key-file ${{ inputs.PRESTASHOP_DIR }}/.docker/ssl.key -cert-file ${{ inputs.PRESTASHOP_DIR }}/.docker/ssl.crt localhost
          ## Link certificate to Chrome Trust Store
          mkdir -p $HOME/.pki/nssdb
          certutil -d $HOME/.pki/nssdb -N
          certutil -d sql:$HOME/.pki/nssdb -n localhost -A -t "TCu,Cu,Tu" -i ${{ inputs.PRESTASHOP_DIR }}/.docker/ssl.crt
          ## Add self-signed certificate to Chrome Trust Store
          mkcert -install

    # Run composer install outside of docker because inside it regularly has network issues
    - name: Composer Install
      if: inputs.DISABLE_MAKE != 'true'
      run: COMPOSER_PROCESS_TIMEOUT=600 composer install --ansi --prefer-dist --no-interaction --no-progress
      shell: bash

    # Docker to create the shop
    - name: Build and Run shop with docker (wait for ${{ env.URL_PING }})
      shell: bash
      env:
        DISABLE_MAKE: ${{ (inputs.DISABLE_MAKE == 'true') && '1' || '0' }}
        PS_ENABLE_SSL: ${{ (inputs.ENABLE_SSL == 'true') && '1' || '0' }}
        PS_INSTALL_AUTO: ${{ (inputs.INSTALL_AUTO == 'true') && '1' || '0' }}
        PS_USE_DOCKER_MAILDEV: 0
        VERSION: ${{ inputs.PHP_VERSION }}-apache
        NODE_VERSION: ${{ inputs.NODE_VERSION }}
        URL_FO: ${{ (inputs.ENABLE_SSL == 'false') && 'http://localhost:8001/' || 'https://localhost:8002/' }}
        URL_PING: ${{ (inputs.INSTALL_AUTO == 'true') && 'en/' || 'install-dev/' }}
        PS_DOMAIN: ${{ (inputs.ENABLE_SSL == 'false') && 'localhost:8001' || 'localhost:8002' }}
        PS_DEV_MODE: ${{ (inputs.DEV_MODE == 'false') && '0' || '1' }}
        DB_SERVER: ${{ inputs.DB_SERVER }}
        DB_NAME: 'prestashop'
        DB_PREFIX: 'tst_'
        DB_USER: 'root'
        DB_PASSWD: 'prestashop'
        PS_LANGUAGE: 'en'
        ADMIN_PASSWD: 'Correct Horse Battery Staple'
      run: |
        cd ${{ inputs.PRESTASHOP_DIR }}
        if [[ "${{ inputs.DOCKER_DAEMON }}" = "true" ]]; then
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker compose -f ${{ (inputs.DB_SERVER == 'mysql') && 'docker-compose.yml' || 'docker-compose.mariadb.yml' }} up -d prestashop-git --build
          bash -c 'while [[ "$(curl -L -s -o /dev/null -w %{http_code} ${{ env.URL_FO }}${{ env.URL_PING }})" != "200" ]]; do sleep 5; done'
        else
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker compose -f ${{ (inputs.DB_SERVER == 'mysql') && 'docker-compose.yml' || 'docker-compose.mariadb.yml' }} up prestashop-git --build
        fi
